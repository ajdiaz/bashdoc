#! /bin/bash
# mod: doc
# api: bashdoc
# txt: The `doc` module provides functions to convert bash source code to
#      HTML, using markdown and specific CSS themes.
DOC_CSS='
* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    margin-top: 0;
}
    html, div, body { margin:0; padding:0; }
    #toc {
      width: 25%;
      margin:50px 0 0 0;
      padding:0 2%;
      float: left;
      background: #3E4042;
      color: #dadada;
    }
    body {
    font-family: "Work sans", Helvetica, Arial, sans-serif;
    font-size: 15px;
    line-height: 1.4;
    background: #3E4042;
    }

    h1,h2,h3,h4,h5,h6 {
      font-family: "Work sans","Helvetica Neue", Helvetica, Arial, sans-serif;
      font-weight: 500;
    }

    #toc ul { padding:0; margin:0; }
    #toc > ul > li { margin-bottom: 2em; }
    #toc li { list-style: none; padding-left:0; }
    #toc ul ul { padding-left: 1.25em; }
    #toc code { display:none; }
    #toc a {
      color: #dadada;
      text-decoration: none;
    }
    #toc a:hover {
      color: #fff;
    }
    #content {
      padding: 50px 5% 50px 5%;
      margin:0 0 0 25%;
      background: #fff;
    }

    .section pre {
      border-radius: 10px;
      border:1px solid #dadada;
      background: #ededed;
      width:100%;
      padding:5px;
      font-family: monospace;
      font-size:120%
    }

    pre.sourceCode {
      border-radius: 0;
      border: 0;
      background: #ededed;
      padding:10px 5px 10px 5px;
      width: auto;
      font-size: 90%;
    }

    .module .section {
      padding-left: 2em;
    }

    .module .section p::first-letter {
      text-transform: capitalize;
    }

    .module h4 { margin-bottom:0 !important; }

    p { 
      width: 80%;
      text-align: justify;
    }

    .module p {
      padding-left: 1em;
      color: #555;
      font-style: italic;
    }

  .module h2 {
    border-bottom:1px solid #444;
    margin:2em 0 1em 0;
  }
  .module h2:before {
     content: "module";
     color: #444;
     font-family: monospace;
     font-size: 90%;
     padding-right:0.4em;
  }

  .module h3 {
    border-bottom:1px solid #dadada;
    margin:2em 0 1em 0;
  }

  .module h3:before {
     content: "function";
     color: #888;
     font-family: monospace;
     font-size: 90%;
     padding-right:0.4em;
  }

  .module dl {
    padding: 0.5em;
  }
  .module dt {
    display: inline-block;
    float: left;
    min-width: 125px;
    font-weight: bold;
    color: #333;
  }
  .module dd:after {
    display: block;
    content: "";
  }
  .module dt:after {
    content: ":";
  }
  .module dd {
    margin: 0 0 0 125px;
  }
  .module h3 code {
    font-size: 80%;
    color: #555;
  }

  hr { margin-top:2em; margin-bottom: 2em; border:1px solid #555;
  background: none; }
  div.sourceCode { width: 100% !important; }
  td.lineNumbers { padding-left:0 !important; }
  .sourceCode pre { margin-bottom:0 !important; }
  .sourceCode { margin-bottom: 0.5em !important; }


h1 code,h2 code,h3 code,h4 code,.section p code, dl code {
  background: none !important;
  color: #555 !important;
}
'

# shellcheck disable=SC2016
DOC_TEMPLATE='
$if(html5)$
<!DOCTYPE html>
<html$if(lang)$ lang="$lang$"$endif$>
$else$
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"$if(lang)$ lang="$lang$" xml:lang="$lang$"$endif$>
$endif$
<head>
$if(html5)$
  <meta charset="utf-8" />
$else$
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
$endif$
  <meta name="generator" content="bashdoc" />
$for(author)$
  <meta name="author" content="$author$" />
$endfor$
$if(date)$
  <meta name="date" content="$date$" />
$endif$
  <link href="https://fonts.googleapis.com/css?family=Lora:400,400italic|Work+Sans:300,400,500,600" rel="stylesheet" type="text/css"/>

  <title>$if(title-prefix)$$title-prefix$ - $endif$$if(pagetitle)$$pagetitle$$endif$</title>
$if(html5)$
  <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
$endif$
$if(highlighting-css)$
  <style type="text/css">
$highlighting-css$
  </style>
$endif$
$for(css)$
  <link rel="stylesheet" href="$css$" $if(html5)$$else$type="text/css" $endif$/>
$endfor$
$if(math)$
$if(html5)$
$else$
  $math$
$endif$
$endif$
$for(header-includes)$
  $header-includes$
$endfor$
<body class="book toc2 toc-left">
$for(include-before)$
$include-before$
$endfor$
<div id="toc" class="toc2">
$toc$
</div>
<div id="content">
$if(title)$
<div id="header">
<h1>$title$</h1>
</div>
$endif$
$body$
</div>
$for(include-after)$
$include-after$
$endfor$
</body>
'

DOCSTRING="${DOCSTRING:-# }"

# fun: doc::read_blocks [api]
# api: bashdoc
# txt: read and print blocks readed from stdin which match with specific api
#      definition. If api is not provided all elements will be documentated,
#      if api is provided, only elements with declared api matched with
#      provided one will be documented. If api is provided, but is not
#      declared in documentation, then item will be documentated too.
# opt: api: a string which identify the API to be documented.
# env: DOCSTRING: The docstring comment which identify a special comment
#      used for documentation. By default 'sha-space' (# ).
# use: doc::read_blocks v1 < script
doc::read_blocks ()
{
  local block_name=MAIN func_name
  local in_opt=false in_env=false in_use=false in_pre=false indent=''
  __doc__apis=()
  __doc__mods=()
  __doc__funs=()

  _reset_pre () {
    if ${in_pre}; then
      __doc__funs["${block_name}|${func_name}"]+="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"$'\n'
      in_pre=false
    fi
  }

  _reset_opt () { in_opt=false; }
  _reset_env () { in_env=false; }
  _reset_use () { in_use=false; }

  while read -r line; do
    # some minor replacements required for markdown parser
    line="${line//</\<}"
    line="${line//>/\>}"

    case "$line" in
      # module section
      "${DOCSTRING}mod: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use
        func_name=""
        block_name="## ${line#${DOCSTRING}mod: } {.module}";;

      # function
      "${DOCSTRING}fun: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use

        # use code in fun parameters
        local fsign="${line#${DOCSTRING}fun: }"
        local fname="${fsign%% *}"
        local fsign="${fsign#* }"
        local fopts=''
        if [ "$fname" != "${fsign}" ]; then
          while [ "${fsign}" ]; do
            read -r word rest <<< "$fsign"
            fopts="${fopts} \`$word\`"
            fsign="$rest"
          done
        fi
        func_name="${fname}"
        __doc__mods["${block_name}|"]+="$fname "
        __doc__funs["${block_name}|${func_name}"]+=$'\n'"### ${fname}${fopts} {.function}"$'\n'
        ;;

      # description
      "${DOCSTRING}txt: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use
        indent=''

        __doc__funs["${block_name}|${func_name}"]+=$'\n'"${line#${DOCSTRING}txt: }"$'\n';;

      # multiline
      "${DOCSTRING}     "*)
        __doc__funs["${block_name}|${func_name}"]+="${indent}${line#${DOCSTRING}     }"$'\n';;

      # environment variables
      "${DOCSTRING}env: "*)
        _reset_pre; _reset_opt; _reset_use
        indent='  '
        ${in_env} || {
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"#### Environment variables"$'\n'
          in_env=true
        }

        local k="${line#${DOCSTRING}env: }"; local k="${k%%:*}"
        local v="${line#${DOCSTRING}env: }"; local v="${v#*: }"

        __doc__funs["${block_name}|${func_name}"]+=$'\n'"\`$k\`"$'\n'": $v"$'\n';;

      # options
      "${DOCSTRING}opt: "*)
        _reset_pre; _reset_env; _reset_use
        indent='  '
        ${in_opt} || {
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"#### Parameters"$'\n'
          in_opt=true
        }

        local k="${line#${DOCSTRING}opt: }"; local k="${k%%:*}"
        local v="${line#${DOCSTRING}opt: }"; local v="${v#*: }"

        __doc__funs["${block_name}|${func_name}"]+=$'\n'"\`$k\`"$'\n'": $v"$'\n';;

      # usage
      "${DOCSTRING}use: "*)
        _reset_pre; _reset_env; _reset_opt
        ${in_use} || {
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"#### Usage example"$'\n'
          in_use=true
          indent=''
        }

        if ! ${in_pre}; then
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.bash}"$'\n'
          in_pre=true
        fi

        line="${line#${DOCSTRING}use: }"

        [ "$line" ] && __doc__funs["${block_name}|${func_name}"]+="${line}"$'\n';;

      #api
      "${DOCSTRING}api: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use
        __doc__apis["${block_name}|${func_name}"]="${line#${DOCSTRING}api: }";;
    esac
  done

  _reset_pre

  declare -a sort_ret=()
  std::sort "${!__doc__mods[@]}"

  for x in "${sort_ret[@]}"; do
    if [ -z "$1" ] || [ "$1" == "${__doc__apis["$x"]}" ]; then
      echo "${x%|}"
      echo "${__doc__funs["$x"]}"
      for fun in ${__doc__mods["$x"]}; do
        if [ -z "$1" ] || [ "$1" == "${__doc__apis["${x}${fun}"]}" ]; then
          echo "${__doc__funs["$x$fun"]}"
        fi
      done
    fi
  done
}
declare -A __doc__mods
declare -A __doc__funs
declare -A __doc__apis

declare -x opt_files
declare -x __opt__template
declare -x __opt__style

# fun: doc::output <file>+
# api: bashdoc
# txt: Create intermediate markdown code required to produce final HTML.
# env: TITLE: The document title.
# env: AUTHOR: The document author.
# env: DATE: The date of the produced document.
# use: doc::output file
doc::output ()
{
  [ "$TITLE" ] && echo "% $TITLE"
  [ "$AUTHOR" ] && echo "% $AUTHOR"
  [ "$DATE" ] && echo "% $DATE"
  echo

  for f in $opt_files; do
    cat "$f"
    echo -e "\n---\n"
  done
  for doc in "$@"; do
    if [[ "$API" ]]; then
      for api in ${API//,/ }; do
        echo "# $api API Reference" && echo
        doc::read_blocks "$api" < "$doc"
      done
    else
      echo "# API Reference" && echo
      doc::read_blocks "" < "$doc"
    fi
    echo -e "\n---\n"
  done
}

# fun: doc::generate <file>+
# api: bashdoc
# txt: generate HTML for the specified files passed as arguments.
# env: OUTPUT: filename of the output file or stdout if not provided.
# use: doc::generate file
doc::generate ()
{
  local output=( ${OUTPUT:+-o $OUTPUT} )
  local tmpfile; tmpfile="$(tmp::file)"

  if [[ "${__opt__template}" ]]; then
    DOC_TEMPLATE="$(< "${__opt__template}")"
    out::info "Using template: ${__opt__template}"
  fi

  if [[ "${__opt__style}" ]]; then
    DOC_CSS="$(< "${__opt__style}")"
    out::info "Using stylesheet: ${__opt__style}"
  fi

  out::info "Highlight syntax: ${__opt__highlight:-haddock}"
  out::info "Generating ${__opt__format:-html} into ${OUTPUT:-stdout}"

  echo "$DOC_TEMPLATE" > "$tmpfile.template"

  case "${__opt__format:-html}" in
    markdown|md|markdown2|md2)
      doc::output "$@" > "$OUTPUT";;
    man)
      pandoc --to=man --from=markdown+smart \
        <(doc::output "$@") "${output[@]}";;
    html)
      pandoc --to=html5+smart --from=markdown+smart -s --toc --section-divs \
        --metadata "pagetitle=${__opt__title:-$TITLE}" \
        --highlight-style "${__opt__highlight:-haddock}" \
        --template "$tmpfile.template" \
        -H <(echo "<style>$DOC_CSS</style>") \
        <(doc::output "$@") \
        "${output[@]}";;
  esac
}
