#! /bin/bash
# mod: arg
# api: blib
# txt: The `arg` module provides a number of functions to parse arguments
#      from command line.
#
#      To use the `arg` module you need to create handler functions which will
#      be called during the parser process. The handler functions should return
#      the number of parameters comsumed from the parameter list. See
#      example below for more information.
# use: opt_quiet () {
#          QUIET=true; return 1; # we consum only the -q param
#      }
#      create () { echo "$arguments" }
#
#      arg::opt MAIN -q --quiet   opt_quiet   'do not output messages'
#
#      arg::action create create 'create new things'
#      arg::param create "arguments+"  'argument to create subcommand'
#
#      arg::parse "$@"


declare -A arg__opt_long
declare -A arg__opt_short
declare -A arg__opt_help
declare -A arg__actions
declare -A arg__actions_help
declare -A arg__param

# fun: arg::opt <action> <short> <long> <handler> [help]
# api: blib
# txt: set an option for a specific action argument.
# opt: action: the action for which the option will be added
# opt: short: the short form of the option (usually prefixed by ``-``)
# opt: long: the long form of the option (usually prefixed by ``--``)
# opt: handler: function to handler when option is present.
arg::opt () {
  arg__opt_short["$1,${2#-}"]="$4"
  arg__opt_long["$1,${3#--}"]="$4"
  arg__opt_help["$1,${2#-},${3#--}"]="$5"
}

# fun: arg::parse::opt::fail <cmdline>
# txt: exit program with error 2 (cmdline error) interpreting cmdline passed
#      as argument.
# opt: cmdline: the cmdline which fails.
arg::parse::opt::fail () {
  echo "unrecognized command line option '${1}'" >&2
  E=2 arg::usage >&2
}

# fun: arg::parse::opt::long <action> <option> [option argument]
# txt: set the specific long option for the action passed as argument. The
#      option can be suffixed with a colon (:) to specify a mandatory
#      argument.
arg::parse::opt::long () {
  local opt="${2#--}"
  local fun="${arg__opt_long["$1,$opt"]}"
  [ "$fun" ] || 
    local fun="${arg__opt_long["$1,$opt:"]}"

  if [ "$fun" ]; then
    "$fun" "$3"
  else
    arg::parse::opt::fail "${2%:}"
  fi
}

# fun: arg::parse::opt::short <action> <option> [option argument]
# txt: set the specific short option for the action passed as argument. The
#      option can be suffixed with a colon (:) to specify a mandatory
#      argument.
arg::parse::opt::short () {
  local opt="${2#-}"
  local fun="${arg__opt_short["$1,$opt"]}"
  [ "$fun" ] || 
    local fun="${arg__opt_short["$1,$opt:"]}"
  if [ "$fun" ]; then
    $fun "$3"
  else
    arg::parse::opt::fail "${2%:}"
  fi
}

# fun: arg::action <action> <handler> [help_message]
# api: blib
# txt: set a new action in argument parser.
# opt: action: the action name to add to the parser
# opt: handler: the function name to use as handler for this action.
# opt: help_message: a message to print on usage.
arg::action () {
  arg::opt "$1" -h --help "arg::usage::action::explain $1" \
    "print help message about $1 action"
  arg__actions["${1}"]="$2"
  arg__actions_help["${1}"]="$3"
}

# fun: arg::usage::action <action>
# txt: print usage information for the action passed as argument.
arg::usage::action::explain () {
  local summ="usage: $0 ${1//MAIN/}"
  local text=""
  local param=""

  for key in "${!arg__opt_help[@]}"; do
    IFS=',' read -r action short long <<<"${key}"
    [ "$action" != "$1" ] && continue
    local help_str="${arg__opt_help["$key"]}"

    if [ "${short: -1}" == ":" ]; then
      local argname="${long%:}"
      local argname="${argname/-/_}"
      local argname=" ${argname^^}"
    else
      local argname=''
    fi
    summ+=" [-${short%:}${argname}]"

    if [ "${argname}" ]; then
      text+="$(printf "  %-20s" \
               "-${short%:}${argname}, --${long%:}${argname}")"
      text+=$'\n'
      text+="$(printf "  %-20s %s" '' "${help_str}")"
    else
      text+="$(printf "  %-20s %s" \
               "-${short%:}${argname}, --${long%:}" \
               "${help_str}")"
    fi
    text+=$'\n'
  done

  local spam=''
  for key in "${!arg__param[@]}"; do
    IFS=',' read -r action par <<<"${key}"
    [ "$action" != "$1" ] && continue
    local help_str="${arg__param["$key"]}"
    param+="$(printf "  %-20s %s" "${par}" "${help_str}")"
    param+=$'\n'
    case "$par" in
      *\?|*'*') spam+="${spam:+ }[${par}]";;
      *) spam+="${spam:+ }<${par}>";;
    esac
  done

  if [ "$1" == "MAIN" ]; then
    local sact=''
    for action in "${!arg__actions[@]}"; do
      [ "$action" == "MAIN" ] && continue
      sact+="${sact:+, }$action"
      actions+="$(printf "  %-20s %s" \
                  "${action}" \
                  "${arg__actions_help["$action"]}")"
      actions+=$'\n'
    done
  fi
  echo "$summ${sact:+" \{$sact\}"}${spam:+ $spam}"
  echo

  [ "$1" == "MAIN" ] && [ "${arg__actions_help["MAIN"]}" ] &&
    echo "${arg__actions_help["MAIN"]}" && echo

  if [ "$actions" ]; then
    echo "command line actions:"
    echo "$actions"
  fi
  if [ "$param" ]; then
    echo "positional parameters:"
    echo "$param"
  fi
  if [ "$text" ]; then
    echo "optional arguments:"
    echo "$text"
  fi

  exit "${E:-0}"
}

# fun: arg:::main::help <text>
# api: blib
# txt: Set the main help for the program
# opt: text: the main help string for the program
arg::main::help () {
  arg__actions_help["MAIN"]="$1"
}

# fun: arg:::main::action <fun>
# api: blib
# txt: Set the function handler for main action, used when no action
#      defined.
# opt: fun: the handler for the MAIN action.
arg::main::action () {
  arg__actions["MAIN"]="$1"
}

# fun: arg::usage
# api: blib
# txt: print main usage information
# env: E: the error code to return to OS on exit.
arg::usage () {
  arg::usage::action::explain MAIN
}

# fun: arg::parse::action <action> [arguments]
# txt: parse arguments starting with action passed as argument.
arg::parse::action () {
  local action="$1"; shift;
  while [ $# -ne 0 ]; do
    case "$1" in
      --*=*)
        arg::parse::opt::long "$action" "${1%=*}" "${1#*=}"; shift;;
      --*) arg::parse::opt::long "$action" "$@"; shift $?;;
      -*) arg::parse::opt::short "$action" "$@"; shift $?;;
      *) break;;
    esac
  done
  if [ "$action" == "MAIN" ]; then
    if [ "${arg__actions["MAIN"]}" ]; then
      arg::parse::arg MAIN "$@"; shift $?
    else
      arg::parse::action "$@";
    fi
    return
  else
    arg::parse::arg "$action" "$@"; shift $?
  fi

}

# fun: arg::parse::arg <action> [arguments]
# txt: parse arguments (not options) for specific action passed as argument.
arg::parse::arg () {
  local action="$1"; shift
  if [ -z "$action" ]; then
    echo "missing action command" >&2
    arg::usage >&2
    exit 2
  fi
  local handler="${arg__actions["$action"]}"
  [ "$handler" ] || arg::parse::opt::fail "$action"

  count=0
  for param in "${!arg__param[@]}"; do
    IFS=, read -r a name <<< "${param}"
    if [ "$action" == "$a" ]; then
      case "$name" in
        *+) ((count++));;
        *\?|*'*') ;;
        *) ((count++));;
      esac
    fi
  done

  if [ $# -lt $count ]; then
    echo "missing arguments: $# found, $count expected" >&2
    arg::usage::action::explain "$action" >&2
    exit 2
  fi

  $handler "$@"
}

# fun: arg::parse [arguments]
# api: blib
# txt: parse arguments according with previous configured parser.
arg::parse () {
  arg::opt MAIN -h --help 'arg::usage' 'print help message'
  arg::parse::action MAIN "$@"
}

# fun: arg::param <action> <parameter_name> [help_str]
# api: blib
# txt: add position parameter to parser.
# opt: action: action where add the parameter
# opt: parameter_name: the name of the paramenter
# opt: help_str: a help string for the parameter to show in usage
arg::param () {
  arg__param["$1,$2"]="$3"
}
#! /bin/bash
# mod: cache
# api: blib
# txt: The `cache` module provides a simple in-memory cache.
# use: cache::put "key" "val"
#      cache::get "key"

# fun: cache::get <key>
# api: blib
# txt: get the value of the key from the potion in-memory cache.
cache::get () {
  echo "${cache__contents["$1"]}"
}

# fun: cache::put <key> <value>
# api: blib
# txt: save the content of the specified key to the in-memory cache.
cache::put () {
  cache__contents["$1"]="$2"
}

declare -A cache__contents
#! /bin/bash
# mod: config
# api: blib
# txt: The `config` module allows you to read configuration file in
#      properties format
# use: config::load configname ./config.properties
#      echo $(config::get configname key)

declare -A __config

# fun: config::load <table> <file>
# api: blib
# txt: read a configuration file passed as argument and save in the memory
#      with specific table name.
# opt: table: a name to identify the config table where file will be load.
# opt: file: path to a properties file to load.
config::load ()
{
  local line= key= val=
  while read line; do
    case "$line" in
      \#*|'') continue;;
    esac
    IFS=':' read key val <<< "$line"
    __config["$1.$key"]="$val"
  done < "$2"
}

# fun: config::get <table> <key> [default]
# api: blib
# txt: outputs the specified configuration key in the table passed as
#      argument. If key does not exists raise an error, unless default
#      is passed as argument, in that case return default values.
# opt: table: the table name where to search key.
# opt: key: the key to search in config table
# opt: default: default value to output if value is not found. By default
#      an error is raised.
config::get ()
{
  local val="${__config["$1.$2"]}"

  if [ "$3" ]; then
    [ "$val" ] && echo "$val" || echo "$3"
  else
    [ "$val" ] && echo "$val" || err::trace "Configuration key " \
                                            "$2 in table $1 not found"
  fi
}

# fun: config::iter <table> <pattern>
# api: blib
# txt: iterate over a specific configuration using pattern passed as
#      argument and outputs keys with match.
# opt: table: the table name to iterate
# opt: pattern: a glob pattern to match in config keys.
config::iter ()
{
  for key in "${!__config[@]}"; do
    case "$key" in
      ${1}.${2})

        echo "${key#${1}.}";;
    esac
  done
}
#! /bin/bash
# mod: curl
# api: blib
# txt: The curl module offers a way to access to HTTP resources easily.

# fun: curl::get <url>
# api: blib
# txt: get an object from url and output it to stdout
# opt: url: any URL valid for curl.
# use: curl::get http://example.com
curl::get () {
  command curl -qsSL "$1"
}

# fun: curl::source <url>
# api: blib
# txt: sources a file from url
# use: curl::source http://mydomain.com/file.bash
curl::source () {
  case "$1" in
    *://*) source <(curl::get "$1");;
    *) source "$1" ;;
  esac
}
#! /bin/bash
# mod: debug
# api: blib
# txt: The debug module enable or disable debug featuring.
# env: DEBUG: if true enable debug mode

${DEBUG:+set -x}
#! /bin/bash
# mod: mutex
# api: blib
# txt: The `mutex` module provides a way to ensure critical region access
#      across different processes. NOTE this module does not work fine on some
#      filesystems, like NFS, AFS and others.
# use: mutex::run mymutex sleep 10 # run a sleep in a critical region
#      mutex::adquire mymutex
#      # do some critical changes
#      mutex::release mymutex

# fun: mutex::adquire <name>
# api: blib
# txt: create a mutex or wait until mutex removed
# opt: name: the name to identify this mutex
mutex::adquire () {
  local i=0
  tmp::create _mutex
  while ! std::mute mkdir "_mutex_$1"; do
    [ $i -eq ${MUTEX_TIMEOUT:-3600} ] && err::trace "Mutex timeout: $1"
    ${VERBOSE:-false} && out::user "waiting for mutex: $1 ($_run)"
    sleep "1.${RANDOM}"
    ((i++))
  done
  tmp::exit
  ${VERBOSE:-false} && out::user "adquired mutex: $1 ($_run)"
}

# fun: mutex::release <name>
# api: blib
# txt: release mutex by name
# opt: name: the name to identify this mutex
mutex::release () {
  tmp::create _mutex
  ${VERBOSE:-false} && out::user "releasing mutex: $1 ($_run)"
  rmdir "_mutex_${1}"
  tmp::exit
}

# fun: mutex::run <name> <command> [args]
# api: blib
# txt: run a command protected by mutex named as argument name.
# opt: name: the name to identify this mutex
# opt: command: the command to run
# opt: args: optional arguments to the command.
mutex::run () {
  local name="$1"; shift
  _run="$@"
  mutex::adquire "$name"
  "$@"
  local ret=$?
  mutex::release "$name"
  return $ret
}
#! /bin/bash
# mod: os
# api: blib
# txt: The `os` module provides specified functions to guess the operating
#      system related variables.

# fun: os::family
# api: blib
# txt: print to stdout the operating system family
os::family () {
  uname -o
}

# fun: os::provider
# api: blib
# txt: print the operating system provider (formerly distribution).
os::provider () {
  for f in ${!os__provider[@]}; do
    if [ -r "$f" ]; then
      echo "${os__provider["$f"]}"
      return 0
    fi
  done

  if [ -r /etc/lsb-release ]; then
    std::mute grep 'DISTRIB_ID=Ubuntu' /etc/lsb-release &&
      echo ubuntu && return 0
  fi
  return 1
}
declare -A os__provider
os__provider["/etc/arch-release"]="archlinux"

# fun: os::release
# api: blib
# txt: print to stdout the properly release of operating system provider.
os::release () {
  local provider="$(os::provider)"
  if std::func os::release::${provider}; then
    std::func::os::release::${provider}
  fi
  true
}

# fun: os::path <file>
# api: blib
# txt: return the path of a file in PATH
# opt: file: the file name to find the full path.
# env: PATH: contains the path to search file
os::path () { type -P "$1" 2>/dev/null; }
#! /bin/bash
# mod: os.ubuntu
# txt: The ``os.ubuntu`` module extends ``os`` module adding specific
#      functions for Ubuntu based systems.

# fun: os::relase::ubuntu
# txt: return specific relese for ubuntu operating systems.
os::release::ubuntu () {
  IFS='=' read _ release < <(grep "^DISTRIB_RELEASE=" /etc/lsb-release)
  echo "$release"
}
#! /bin/bash
# mod: term
# api: blib
# txt: The `term` module provides functions related with terminal
#      configuration. This module also define some useful color variables to
#      be used in `out` module.

# fun: term::attached
# api: blib
# txt: return true if output is a terminal, false otherwise
term::attached () { [ -t 1 ] && ! ${BLIB_DISABLE_COLORS:-false}; }

# fun: term::tcap <capability>
# api: blib
# txt: check if some capabilty is enabled in terminal
term::tcap () { tput "$1" 2>/dev/null; }

# fun: term::init
# api: blib
# txt: initialize terminal, in theory you never need to call this function,
#      unless you want to change your terminal online.
term::init () {
  if term::attached; then
    case "$(term::tcap colors)" in
      256)
        COLOR_NONE=$'\033[0;0;0m'
        COLOR_INFO=$'\033[38;5;79m'
        COLOR_WARN=$'\033[38;5;190m'
        COLOR_FAIL=$'\033[38;5;160m'
        COLOR_DATE=$'\033[38;5;242m'
        COLOR_USER=$'\033[38;5;201m'
        COLOR_BOLD=$'\033[1;15m'
        ;;
    esac
  else
    unset COLOR_NONE COLOR_INFO COLOR_WARN COLOR_FAIL
    unset COLOR_DATE COLOR_USER COLOR_BOLD
  fi
}

term::init
#! /bin/bash
# mod: tmp
# api: blib
# txt: The `tmp` module provides functions to create and destroy temporary
#      directories. Even if you don't remove the temporary file or directoy
#      explicitely, the directory or file will be deleted when program
#      exits.
# env: TMPDIR: a subdirectory into /tmp to use to create temporary files or
#      directories.
# env: BLIB_TMPDIR: a full path to temporary directory to use to store files
#      or other directories.
# use: tmp::create
#      # do some actions in current directory, which is temporary one
#      tmp::destroy
# use: echo $(tmp::file)

BLIB_TMPDIR="/tmp/${TMPDIR:-blib}"

__current_tmp=
# fun: tmp::create <dirname>
# api: blib
# txt: create temporary directory and move working directory into it
tmp::create () {
  __current_tmp="$PWD"
  mkdir -p "${BLIB_TMPDIR}/$1" && cd "${BLIB_TMPDIR}/$1"
  std::add_quit_handler tmp tmp::destroy
}

# fun: tmp::exit
# api: blib
# txt: exit the temporary directory, but not remove it.
tmp::exit () {
  cd "${__current_tmp:-/}"
}

# fun: tmp::destroy
# api: blib
# txt: move to root directoy and remove temporary directory
tmp::destroy () {
  tmp::exit && rm -rf "${BLIB_TMPDIR}/$1" && unset __current_tmp
}

# fun: tmp::exists <name>
# api: blib
# txt: return true if the specified file name or directory name is
#      a temporary file or directory.
tmp::exists () {
  [ -e "${BLIB_TMPDIR}/$1" ]
}

# fun: tmp::file
# api: blib
# txt: print to stdout the name of unique temporary file.
tmp::file () {
  mkdir -p "${BLIB_TMPDIR}" && echo ${BLIB_TMPDIR}/$$-${RANDOM}
  std::add_quit_handler tmp tmp::destroy
}

# fun: tmp::touch <name>
# api: blib
# txt: create a temporary file with specified name in temporary directory.
tmp::touch () {
  mkdir -p "${BLIB_TMPDIR}" && : > "${BLIB_TMPDIR}/$1"
}
#! /bin/bash
# mod: version
# api: blib
# txt: The `version` module provides a number of functions to handle version
#      numbers.

# fun: version::cmp <version1> <version2>
# txt: compare two version numbers, return -1 (255) if version1 is greater
#      than version2, return 1 if version2 is greater than version1 and 0
#      if both are equal
version::cmp () {
  local ver1 rev1 pat1 ver2 rev2 pat2
  { IFS='.' read -r ver1 rev1 pat1 <<<"$1"; }
  { IFS='.' read -r ver2 rev2 pat2 <<<"$2"; }

  [[ "$ver1" -gt "$ver2" ]] && return 255
  [[ "$ver2" -gt "$ver1" ]] && return 1
  [[ "$rev1" -gt "$rev2" ]] && return 255
  [[ "$rev2" -gt "$rev1" ]] && return 1
  [[ "$pat1" -gt "$pat2" ]] && return 255
  [[ "$pat2" -gt "$pat1" ]] && return 1

  return 0
}
#! /bin/bash
# mod: out
# api: blib
# txt: The `out` module provides functions to output messages in stderr or
#      stdout.

# fun: out::log <message> [message_type]
# api: blib
# txt: print to stdout a log line with specified message and prefixed by
#      date and message_type.
# env: DATE_FORMAT: defines the format for the datetime, in regular date(1)
#      format.
# env: COLOR_DATE: defines the color to use (if available) to print the date.
# env: COLOR_MESSAGE: defines the color to use to print the message.
# env: COLOR_NONE: defines the sequence to reset defined color.
# env: QUIET: if true do not show any messages
DATE_FORMAT="%Y-%m-%d %H:%M:%S"
out::log () {
  ${QUIET:-false} ||
  printf "${COLOR_DATE}%s${COLOR_NONE} %s: ${COLOR_MESSAGE}%s${COLOR_NONE}\n" \
    "$(date +"$DATE_FORMAT")" \
    "${2:-${COLOR_USER}user${COLOR_NONE}}" \
    "$1"
}

# fun: out::info <message>
# api: blib
# txt: print an informational message in stdout.
# env: COLOR_INFO: defines the color to be used in informational messages.
out::info () { out::log "$1" "${COLOR_INFO}info${COLOR_NONE}"; }

# fun: out::fail <message>
# txt: print an informational message in stdout.
# txt: print an error message in stderr.
# env: COLOR_FAIL: defines the color to be used in this kind of messages.
#      E: if set exit program with error code defined in the variable
out::fail () {
  out::log "$1" "${COLOR_FAIL}fail${COLOR_NONE}" >&4;
  ${E:+exit $E}
}

# fun: out::warn <message>
# txt: print an informational message in stdout.
# txt: print a warning message in stderr.
# env: COLOR_WARN: defines the color to be used in this kind of messages.
out::warn () { out::log "$1" "${COLOR_WARN}warn${COLOR_NONE}" >&4; }

# fun: out::user <message>
# txt: print an informational message in stdout.
# txt: print a user defined message in stdout
# env: COLOR_USER: defines the color to be used in this kind of messages.
out::user () { out::log "$1" "${COLOR_USER}user${COLOR_NONE}"; }

# This code catches all messages in stderr and prefixes them with out::fail,
# cloning &2 to &4 and redirecting all &2 messages to &4

if ${DEBUG:-false}; then
  exec 4>&2
else
  exec 4>&2
  unset err_handler
  coproc err_handler ( read -r line; out::fail "$line";)
  export OUT__STDERR__PID="$!"
  eval "exec 2>&${err_handler[1]}"
fi

out::_close_fd ()
{
  kill "${OUT__STDERR__PID}"
}
#! /bin/bash
# mod: err
# api: blib
# txt: The `err` module offers a way to stop potion execution with
#      a traceback.

# fun: err::trace
# api: blib
# txt: print to stderr a traceback of an error.
# use: false || err::trace "Error because of false"
err::trace () {
  echo "${COLOR_FAIL}Traceback (most recent call last):${COLOR_NONE}" >&4
  for ((i=0;; i++)); do
    read -r line fun file < <(caller "$i")
    if [ "$line" ]; then
      echo "${COLOR_FAIL} File '$file', line $line, in $fun${COLOR_NONE}" >&4
    else
      break
    fi
  done
  out::fail "$1"
  exit 127
}
#! /bin/bash
# mod: std
# api: blib
# txt: The `std` module contains a numer of standard functions usefull to
#      progamming in bash.

# fun: std::quit
# api: blib
# txt: perform an exit clean of the running program.
std::quit () {
  for handler in "${std__quit_handler[@]}"; do
    $handler
  done
}

# fun: std::add_quit_handler <func_name>
# api: blib
# txt: Add func_name as handler to execute before quit the application.
#      When the application finished, then the functions registered as quit
#      handlers will be executed in the same order than they were
#      registered.
# opt: func_name: the name of the function to be registered.
# use: somefunc () { echo "exiting"; }
#      std::add_quit_handler somefunc
declare -A std__quit_handler
std__quit_handler["tmp"]="tmp::destroy"
std__quit_handler["out"]="out::_close_fd"
std::add_quit_handler () {
  std__quit_handler["$1"]="$2"
}
trap std::quit EXIT

# fun: std::hmac <text>
# api: blib
# txt: outputs the calculated HMAC using SHA1 for the text passed as
#      argument.
# opt: text: a plain text to be hashed.
# env: ALGO: set the algorithm to use for calculate HMAC. Valid values are:
#      sha1, md5, sha256, sha512. The proper helper tool must be installed
#      on the system.
# use: std::hmac "hello world"
#      ALGO=md5 std::hmac "hello world"
std::hmac () {
  ALGO="${ALGO:=sha1}"
  local sum=
  local path; path="$(os::path ${ALGO}sum)"
  if [ "$path" ]; then
    sum="$(echo -n "$1" | ${ALGO}sum)"
    read -r sum _ <<<"$sum"
    echo "$sum"
  else
    err::trace "Required binary '${ALGO}sum' not found"
  fi
}

# fun: std::mute <command>
# api: blib
# txt: mute outputs, including `stderr` when running a command, alias or
#      function
# opt: command: the command to run muted.
std::mute () {
  "$@" >/dev/null 2>/dev/null
}

# fun: std::strin <str1> <str2>
# api: blib
# txt: return true if `str2` is into `str1`, or false otherwise.
# opt: str1: the string which could be contain `str2` and wants to evaluate
# opt: str2: the string to find into `str1`
# use: std::strin "somelargestring" "some"
std::strin () {
  [[ "${1//$2/}" != "${1}" ]]
}

# fun: std::sleep <seconds>
# api: blib
# txt: sleep for specified number of seconds. This function is pure-bash, so
#      not need sleep(1) command.
std::sleep () {
  read -N 0 -t "$1" -s -r </dev/tty 3<&- 3<&0 <&3
}

# fun: std::func <func_name>
# api: blib
# txt: return true if function name passed as argument is defined, or false
#      otherwise.
std::func () {
  std::mute declare -f "$1"
}

# fun: std::arch
# api: blib
# txt: outputs the hardware architecture of the current host.
std::arch () {
  uname -m
}

# fun: std::timestamp
# api: blib
# txt: outputs the UNIX timestamp
# env: TZ: the timezone to use to print the timestamp, by default get the
#      timezone from the system.
std::timestamp () {
  # shellcheck disable=SC2183
  printf "%(%s)T\n"
}

# fun: std::parse <arg_string>
# api: blib
# txt: parse an argument string in the form key=value and promote this
#      variables to environment. The key `name` is mandatory. If the
#      first parameter has no key, key `name` is using by default. The
#      `name` parameter must be the first one.
# use: std::parse "name=Jhon" "age=90"
#      echo "$name has $age years old"
std::parse () {
  local key val
  export name
  name="${1#name=}"; shift

  for arg in "$@"; do
    if std::strin "$arg" "="; then
      IFS='=' read -d $'\0' -r key val <<< "$arg"

      val="${val%$'\n'}" # XXX dirty hack to avoid problems with last \n
                         # and one line text.

      [[ "${key/=/}" ]] || err::trace "Invalid argument: $arg"
      if ! std::mute declare -p "$key"; then
        err::trace "Variable '$key' is undefined (required to parse '$arg')"
      fi
      export "$key"="$val"
    fi
  done
}

# fun: std::run <command>
# api: blib
# txt: Run command passed as argument if $PRETEND is not set to true
# env: PRETEND: if true do nothing.
std::run () {
  ${PRETEND:-false} || "$@"
}

# fun: std::installed <command>
# api: blib
# txt: return true if command is installed in path
std::installed () {
  std::mute type -p "$1"
}

# fun: std::is_dir_empty <dir>
# api: blib
# txt: return true if dir is empty
std::is_dir_empty () {
  for f in "$1"/*; do
    [ "$f" == "$1/*" ] && return 0
    return 1
  done
}

# fun: std::sort <array>
# api: blib
# txt: sort an array using qsort in pure bash (not very efficient) and
#      return the output to an special variable called `sort_ret`.
# env: sort_ret: will contain the sorted array
std::sort () {
   local pivot i smaller=() larger=()
   sort_ret=()
   (($#==0)) && return 0
   local pivot="$1"
   shift
   for i; do
      if [[ "$i" < "$pivot" ]]; then
         smaller+=( "$i" )
      else
         larger+=( "$i" )
      fi
   done
   std::sort "${smaller[@]}"
   smaller=( "${sort_ret[@]}" )
   std::sort "${larger[@]}"
   larger=( "${sort_ret[@]}" )
   sort_ret=( "${smaller[@]}" "$pivot" "${larger[@]}" )
}

# fun: str2array <string> [separator]
# api: blib
# txt: create a new array with the contents of the string, using separator
#      passed as argument.
# opt: string: the string to covert to array
# opt: separator: the character to use as separator, by default use comma.
# use: str2array "one,two,three"
#      echo "${str2array_ret[@]}"
std::str2array () {
  local str="$1"
  # remove [] if present
  str="${str#[}"
  str="${str%]}"

  eval set -- "${str//,/ }"
  str2array_ret=( "$@" )
}
declare -xa str2array_ret
BLIB_VERSION='2.0-1-gbf431b8'
#! /bin/bash
# mod: main
# txt: The ``main`` module contain the specified potion body.

readonly VERSION="2.0.3"

# fun: main::init
# txt: print nice potion logo and some custom messages at the beginning.
main::init () {

out::user "    ${COLOR_WARN},   ,${COLOR_NONE}"
out::user "   ${COLOR_WARN}/////|${COLOR_NONE}"
out::user "  ${COLOR_WARN}///// |${COLOR_NONE} ${COLOR_INFO} _               _         _            ${COLOR_NONE}"
out::user " ${COLOR_WARN}|~~~|  |${COLOR_NONE} ${COLOR_INFO}| |__   __ _ ___| |__   __| | ___   ___ ${COLOR_NONE}"
out::user " ${COLOR_WARN}|===|  |${COLOR_NONE} ${COLOR_INFO}| '_ \\ / _\` / __| '_ \\ / _\` |/ _ \\ / __|${COLOR_NONE}"
out::user " ${COLOR_WARN}|   |  |${COLOR_NONE} ${COLOR_INFO}| |_) | (_| \\__ \\ | | | (_| | (_) | (__ ${COLOR_NONE}"
out::user " ${COLOR_WARN}|   |  |${COLOR_NONE} ${COLOR_INFO}|_.__/ \\__,_|___/_| |_|\\__,_|\\___/ \\___|${COLOR_NONE}"
out::user " ${COLOR_WARN}|   | /${COLOR_NONE}  ${COLOR_USER}version ${VERSION}${COLOR_NONE}"
out::user " ${COLOR_WARN}|===|/${COLOR_NONE}"
out::user " ${COLOR_WARN}'---'${COLOR_NONE}"
                                        

                                        
}

opt_files=""
# general options handlers
main::opt_version () { out::info "Bashdoc $VERSION"; exit 0;}
main::opt_title () { TITLE="$1"; return 2; }
main::opt_author () { AUTHOR="$1"; return 2; }
main::opt_output () { OUTPUT="$1"; return 2; }
main::opt_date () { DATE="$(date +%Y-%m-%d)"; return 1; }
main::opt_file () { opt_files="$opt_files $1"; return 2; }
main::opt_api () { API="$1"; return 2; }
main::opt_style () { __opt__style="$1"; echo "$@" ; return 2; }
main::opt_template () { __opt__template="$1"; return 2; }
main::opt_highlight () { __opt__highlight="$1"; return 2; }

# main function really
main::action () {
  main::init
  doc::generate "$@"
}

main () {
  arg::opt MAIN -V --version main::opt_version 'show program version number'
  arg::opt MAIN -T --title   main::opt_title   'set the title of the document'
  arg::opt MAIN -a --author  main::opt_author  'set the author of the document'
  arg::opt MAIN -o --output  main::opt_output  'set the output file name'
  arg::opt MAIN -d --include-date  main::opt_date   'add date to the document'
  arg::opt MAIN -f --file    main::opt_file         'add more section files'
  arg::opt MAIN -A --api     main::opt_api          'set api to be documented'
  arg::opt MAIN -s --style   main::opt_style        'path to CSS stylesheet'
  arg::opt MAIN -t --template  main::opt_template   'path to HTML template'
  arg::opt MAIN -H --highlight-theme  main::opt_highlight \
    'theme name to highlight code'

  arg::main::help "Generate documentation for bash programs"
  arg::main::action main::action

  arg::param MAIN "script+" \
    'Path or URL to script to create documentation'

  arg::parse "$@"
}
#! /bin/bash
# mod: doc
# api: bashdoc
# txt: The `doc` module provides functions to convert bash source code to
#      HTML, using markdown and specific CSS themes.
DOC_CSS='
* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    margin-top: 0;
}
    html, div, body { margin:0; padding:0; }
    #toc {
      width: 25%;
      margin:50px 0 0 0;
      padding:0 2%;
      float: left;
      background: #3E4042;
      color: #dadada;
    }
    body {
    font-family: "Work sans", Helvetica, Arial, sans-serif;
    font-size: 15px;
    line-height: 1.4;
    background: #3E4042;
    }

    h1,h2,h3,h4,h5,h6 {
      font-family: "Work sans","Helvetica Neue", Helvetica, Arial, sans-serif;
      font-weight: 500;
    }

    #toc ul { padding:0; margin:0; }
    #toc > ul > li { margin-bottom: 2em; }
    #toc li { list-style: none; padding-left:0; }
    #toc ul ul { padding-left: 1.25em; }
    #toc code { display:none; }
    #toc a {
      color: #dadada;
      text-decoration: none;
    }
    #toc a:hover {
      color: #fff;
    }
    #content {
      padding: 50px 5% 50px 5%;
      margin:0 0 0 25%;
      background: #fff;
    }

    .section pre {
      border-radius: 10px;
      border:1px solid #dadada;
      background: #ededed;
      width:100%;
      padding:5px;
      font-family: monospace;
      font-size:120%
    }

    pre.sourceCode {
      border-radius: 0;
      border: 0;
      background: #ededed;
      padding:10px 5px 10px 5px;
      width: auto;
      font-size: 90%;
    }

    .module .section {
      padding-left: 2em;
    }

    .module .section p::first-letter {
      text-transform: capitalize;
    }

    .module h4 { margin-bottom:0 !important; }

    p { 
      width: 80%;
      text-align: justify;
    }

    .module p {
      padding-left: 1em;
      color: #555;
      font-style: italic;
    }

  .module h2 {
    border-bottom:1px solid #444;
    margin:2em 0 1em 0;
  }
  .module h2:before {
     content: "module";
     color: #444;
     font-family: monospace;
     font-size: 90%;
     padding-right:0.4em;
  }

  .module h3 {
    border-bottom:1px solid #dadada;
    margin:2em 0 1em 0;
  }

  .module h3:before {
     content: "function";
     color: #888;
     font-family: monospace;
     font-size: 90%;
     padding-right:0.4em;
  }

  .module dl {
    padding: 0.5em;
  }
  .module dt {
    display: inline-block;
    float: left;
    min-width: 125px;
    font-weight: bold;
    color: #333;
  }
  .module dd:after {
    display: block;
    content: "";
  }
  .module dt:after {
    content: ":";
  }
  .module dd {
    margin: 0 0 0 125px;
  }
  .module h3 code {
    font-size: 80%;
    color: #555;
  }

  hr { margin-top:2em; margin-bottom: 2em; border:1px solid #555;
  background: none; }
  div.sourceCode { width: 100% !important; }
  td.lineNumbers { padding-left:0 !important; }
  .sourceCode pre { margin-bottom:0 !important; }
  .sourceCode { margin-bottom: 0.5em !important; }


h1 code,h2 code,h3 code,h4 code,.section p code, dl code {
  background: none !important;
  color: #555 !important;
}
'

DOC_TEMPLATE='
$if(html5)$
<!DOCTYPE html>
<html$if(lang)$ lang="$lang$"$endif$>
$else$
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"$if(lang)$ lang="$lang$" xml:lang="$lang$"$endif$>
$endif$
<head>
$if(html5)$
  <meta charset="utf-8" />
$else$
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
$endif$
  <meta name="generator" content="bashdoc" />
$for(author)$
  <meta name="author" content="$author$" />
$endfor$
$if(date)$
  <meta name="date" content="$date$" />
$endif$
  <link href="https://fonts.googleapis.com/css?family=Lora:400,400italic|Work+Sans:300,400,500,600" rel="stylesheet" type="text/css"/>

  <title>$if(title-prefix)$$title-prefix$ - $endif$$if(pagetitle)$$pagetitle$$endif$</title>
$if(html5)$
  <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
$endif$
$if(highlighting-css)$
  <style type="text/css">
$highlighting-css$
  </style>
$endif$
$for(css)$
  <link rel="stylesheet" href="$css$" $if(html5)$$else$type="text/css" $endif$/>
$endfor$
$if(math)$
$if(html5)$
$else$
  $math$
$endif$
$endif$
$for(header-includes)$
  $header-includes$
$endfor$
<body class="book toc2 toc-left">
$for(include-before)$
$include-before$
$endfor$
<div id="toc" class="toc2">
$toc$
</div>
<div id="content">
$if(title)$
<div id="header">
<h1>$title$</h1>
</div>
$endif$
$body$
</div>
$for(include-after)$
$include-after$
$endfor$
</body>
'

DOCSTRING="${DOCSTRING:-# }"

# fun: doc::read_blocks [api]
# api: bashdoc
# txt: read and print blocks readed from stdin which match with specific api
#      definition. If api is not provided all elements will be documentated,
#      if api is provided, only elements with declared api matched with
#      provided one will be documented. If api is provided, but is not
#      declared in documentation, then item will be documentated too.
# opt: api: a string which identify the API to be documented.
# env: DOCSTRING: The docstring comment which identify a special comment
#      used for documentation. By default 'sha-space' (# ).
# use: doc::read_blocks v1 < script
doc::read_blocks ()
{
  local block_name=MAIN func_name
  local in_opt=false in_env=false in_use=false in_pre=false indent=''
  __doc__apis=()
  __doc__mods=()
  __doc__funs=()

  _reset_pre () {
    if ${in_pre}; then
      __doc__funs["${block_name}|${func_name}"]+="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"$'\n'
      in_pre=false
    fi
  }

  _reset_opt () { in_opt=false; }
  _reset_env () { in_env=false; }
  _reset_use () { in_use=false; }

  while read -r line; do
    # some minor replacements required for markdown parser
    line="${line//</\<}"
    line="${line//>/\>}"

    case "$line" in
      # module section
      "${DOCSTRING}mod: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use
        func_name=""
        block_name="## ${line#${DOCSTRING}mod: } {.module}";;

      # function
      "${DOCSTRING}fun: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use

        # use code in fun parameters
        local fsign="${line#${DOCSTRING}fun: }"
        local fname="${fsign%% *}"
        local fsign="${fsign#* }"
        local fopts=''
        if [ "$fname" != "${fsign}" ]; then
          while [ "${fsign}" ]; do
            read -r word rest <<< "$fsign"
            fopts="${fopts} \`$word\`"
            fsign="$rest"
          done
        fi
        func_name="${fname}"
        __doc__mods["${block_name}|"]+="$fname "
        __doc__funs["${block_name}|${func_name}"]+=$'\n'"### ${fname}${fopts} {.function}"$'\n'
        ;;

      # description
      "${DOCSTRING}txt: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use
        indent=''

        __doc__funs["${block_name}|${func_name}"]+=$'\n'"${line#${DOCSTRING}txt: }"$'\n';;

      # multiline
      "${DOCSTRING}     "*)
        __doc__funs["${block_name}|${func_name}"]+="${indent}${line#${DOCSTRING}     }"$'\n';;

      # environment variables
      "${DOCSTRING}env: "*)
        _reset_pre; _reset_opt; _reset_use
        indent='  '
        ${in_env} || {
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"#### Environment variables"$'\n'
          in_env=true
        }

        local k="${line#${DOCSTRING}env: }"; local k="${k%%:*}"
        local v="${line#${DOCSTRING}env: }"; local v="${v#*: }"

        __doc__funs["${block_name}|${func_name}"]+=$'\n'"\`$k\`"$'\n'": $v"$'\n';;

      # options
      "${DOCSTRING}opt: "*)
        _reset_pre; _reset_env; _reset_use
        indent='  '
        ${in_opt} || {
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"#### Parameters"$'\n'
          in_opt=true
        }

        local k="${line#${DOCSTRING}opt: }"; local k="${k%%:*}"
        local v="${line#${DOCSTRING}opt: }"; local v="${v#*: }"

        __doc__funs["${block_name}|${func_name}"]+=$'\n'"\`$k\`"$'\n'": $v"$'\n';;

      # usage
      "${DOCSTRING}use: "*)
        _reset_pre; _reset_env; _reset_opt
        ${in_use} || {
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"#### Usage example"$'\n'
          in_use=true
          indent=''
        }

        if ! ${in_pre}; then
          __doc__funs["${block_name}|${func_name}"]+=$'\n'"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.bash}"$'\n'
          in_pre=true
        fi

        line="${line#${DOCSTRING}use: }"

        [ "$line" ] && __doc__funs["${block_name}|${func_name}"]+="${line}"$'\n';;

      #api
      "${DOCSTRING}api: "*)
        _reset_pre; _reset_env; _reset_opt; _reset_use
        __doc__apis["${block_name}|${func_name}"]="${line#${DOCSTRING}api: }";;
    esac
  done

  _reset_pre

  declare -a sort_ret=()
  std::sort "${!__doc__mods[@]}"

  for x in "${sort_ret[@]}"; do
    if [ -z "$1" ] || [ "$1" == "${__doc__apis["$x"]}" ]; then
      echo "${x%|}"
      echo "${__doc__funs["$x"]}"
      for fun in ${__doc__mods["$x"]}; do
        if [ -z "$1" ] || [ "$1" == "${__doc__apis["${x}${fun}"]}" ]; then
          echo "${__doc__funs["$x$fun"]}"
        fi
      done
    fi
  done
}
declare -A __doc__mods
declare -A __doc__funs
declare -A __doc__apis


# fun: doc::output <file>+
# api: bashdoc
# txt: Create intermediate markdown code required to produce final HTML.
# env: TITLE: The document title.
# env: AUTHOR: The document author.
# env: DATE: The date of the produced document.
# use: doc::output file
doc::output ()
{
  [ "$TITLE" ] && echo "% $TITLE"
  [ "$AUTHOR" ] && echo "% $AUTHOR"
  [ "$DATE" ] && echo "% $DATE"
  echo

  for f in $opt_files; do
    cat "$f"
    echo -e "\n---\n"
  done
  for doc in "$@"; do
    local docname="${doc#./}"

    if [[ "$API" ]]; then
      for api in ${API//,/ }; do
        echo "# $api API Reference" && echo
        doc::read_blocks "$api" < "$doc"
      done
    else
      echo "# API Reference" && echo
      doc::read_blocks "" < "$doc"
    fi
    echo -e "\n---\n"
  done
}

# fun: doc::generate <file>+
# api: bashdoc
# txt: generate HTML for the specified files passed as arguments.
# env: OUTPUT: filename of the output file or stdout if not provided.
# use: doc::generate file
doc::generate ()
{
  local output="${OUTPUT:+-o $OUTPUT}"
  local tmpfile="$(tmp::file)"

  if [ "${__opt__template}" ]; then
    DOC_TEMPLATE="$(<${__opt__template})"
    out::info "Using template: ${__opt__template}"
  fi

  if [ "${__opt__style}" ]; then
    DOC_CSS="$(<${__opt__style})"
    out::info "Using stylesheet: ${__opt__style}"
  fi

  out::info "Highlight syntax: ${__opt__highlight:-haddock}"
  out::info "Generating HTML into ${OUTPUT:-stdout}"

  echo "$DOC_TEMPLATE" > $tmpfile.template
  pandoc --to=html5+smart --from=markdown+smart -s --toc --section-divs \
    --metadata "pagetitle=${__opt__title:-$TITLE}" \
    --highlight-style ${__opt__highlight:-haddock} \
    --template "$tmpfile.template" \
    -H <(echo "<style>$DOC_CSS</style>") \
    <(echo "$(doc::output "$@")") \
    $output
}
std::installed 'pandoc' ||  err::trace 'pandoc is required but not found'
main "$@"
